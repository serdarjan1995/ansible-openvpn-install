---
- name: Install pip
  become: yes
  apt:
    update_cache: yes
    name:
      - python3-pip

- name: Install pexpect
  become: yes
  pip:
    name: pexpect
        
- name: "[servers] Add apt package signing key for OpenVpn"
  become: yes
  apt_key:
    url: https://swupdate.openvpn.net/repos/repo-public.gpg
    state: present

- name: "[servers] Add openvpn repository"
  become: yes
  shell: echo "deb http://build.openvpn.net/debian/openvpn/{{open_vpn_version}} $(lsb_release -cs) main" > /etc/apt/sources.list.d/openvpn-aptrepo.list

- name: "[servers] Run apt update and install OpenVpn"
  become: yes
  apt:
    update_cache: yes
    name: openvpn
    state: present

- name: "[servers] Adding new group as {{ open_vpn_user }}"
  become: yes
  group:
    name: "{{ open_vpn_user }}"
    state: present
    
- name: "[servers] Adding new user {{ open_vpn_user }}"
  become: yes
  user:
    name: "{{ open_vpn_user }}"
    group: "{{ open_vpn_user }}"
    groups: "{{ open_vpn_user }}, sudo"
    append: yes
    shell: /bin/bash
    state: present

- name: "[servers] Change ownership of /etc/openvpn to {{ open_vpn_user }}"
  become: yes
  file:
    dest: /etc/openvpn
    owner: "{{ open_vpn_user }}"
    group: "{{ open_vpn_user }}"
    recurse: yes

- name: "[local] Creates directory easy-rsa for CA server"
  delegate_to: localhost
  file:
    path: "{{ easy_rsa_local_path }}/easy-rsa"
    state: directory

- name: "[local] Downloading easy-rsa"
  delegate_to: localhost
  get_url:
    url: "{{ easy_rsa_link }}"
    dest: "{{ easy_rsa_local_path }}/{{ easy_rsa_arhive_name }}"
    
- name: "[local] Extract {{ easy_rsa_arhive_name }} into {{ easy_rsa_local_path }}/easy-rsa"
  delegate_to: localhost
  shell:
    cmd: "tar -zxf {{ easy_rsa_local_path }}/{{ easy_rsa_arhive_name }} -C {{ easy_rsa_local_path }}/easy-rsa --strip 1"
    warn: false

- name: "[local] Copy easy-rsa enviroment files"
  delegate_to: localhost
  copy:
    src: "{{ easy_rsa_vars }}"
    dest: "{{ easy_rsa_local_path }}/easy-rsa/vars"

- name: "[local] Setting PKI location"
  delegate_to: localhost
  shell:
    cmd: echo >> {{ easy_rsa_local_path }}/easy-rsa/vars "set_var EASYRSA_PKI		{{ easy_rsa_local_path }}/easy-rsa/pki"
    
- name: "[local] Initializng easy-rsa pki"
  delegate_to: localhost
  expect:
    command: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa init-pki"
    responses:
      'Confirm removal: ': 'yes'
    
- name: "[local] Building CA without password"
  delegate_to: localhost
  expect:
    command: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa build-ca nopass"
    responses:
      'Common Name \(eg: your user, host, or server name\) \[Easy-RSA CA\]:': ''

- name: "[servers] Copying CA certificate to remote hosts"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "{{ easy_rsa_local_path }}/easy-rsa/pki/ca.crt"
    dest: /etc/openvpn/
    mode: '0664'

- name: "[servers] Create directory easy-rsa"
  become: yes
  become_user: "{{ open_vpn_user }}"
  file:
    path: "/home/{{ open_vpn_user }}/easy-rsa"
    state: directory
    owner: "{{ open_vpn_user }}"
    group: "{{ open_vpn_user }}"
    mode: 0770

- name: "[servers] Downloading easy-rsa"
  become: yes
  become_user: "{{ open_vpn_user }}"
  get_url:
    url: "{{ easy_rsa_link }}"
    dest: "/home/{{ open_vpn_user }}/{{ easy_rsa_arhive_name }}"
    
- name: "[servers] Extract {{ easy_rsa_arhive_name }} into /home/{{ open_vpn_user }}/easy-rsa"
  become: yes
  become_user: "{{ open_vpn_user }}"
  shell:
    cmd: "tar -zxf /home/{{ open_vpn_user }}/{{ easy_rsa_arhive_name }} -C /home/{{ open_vpn_user }}/easy-rsa --strip 1"
    warn: false

- name: "[servers] Copy easy-rsa enviroment files"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "{{ easy_rsa_vars }}"
    dest: "/home/{{ open_vpn_user }}/easy-rsa/vars"

- name: "[servers] Assigning PKI location"
  become: yes
  become_user: "{{ open_vpn_user }}"
  shell:
    cmd: echo >> /home/{{ open_vpn_user }}/easy-rsa/vars "set_var EASYRSA_PKI		/home/{{ open_vpn_user }}/easy-rsa/pki"
    
- name: "[servers] Initializng easy-rsa pki"
  become: yes
  become_user: "{{ open_vpn_user }}"
  expect:
    command: "/home/{{ open_vpn_user }}/easy-rsa/easyrsa init-pki"
    responses:
      'Confirm removal: ': 'yes'

- name: "[servers] Generating server keys"
  become: yes
  become_user: "{{ open_vpn_user }}"
  expect:
    command: "/home/{{ open_vpn_user }}/easy-rsa/easyrsa gen-req server nopass"
    responses:
      'Common Name \(eg: your user, host, or server name\) *': ''
  
- name: "[servers] Copy server keys to /etc/openvpn"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/home/{{ open_vpn_user }}/easy-rsa/pki/private/server.key"
    dest: /etc/openvpn/
    mode: '0660'
    remote_src: yes
    
- name: "[servers] Prepare server reqs"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/home/{{ open_vpn_user }}/easy-rsa/pki/reqs/server.req"
    dest: "/home/{{ open_vpn_user }}/"
    remote_src: yes
    
- name: "[local] Fetching certificate reqs from remote nodes"
  fetch:
    src: "/home/{{ open_vpn_user }}/server.req"
    dest: "fetched/server/{{ inventory_hostname }}.req"
    flat: yes
    
- name: "[local] Importing certificate reqs"
  delegate_to: localhost
  command:
    cmd: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa import-req fetched/server/{{ inventory_hostname }}.req {{ inventory_hostname }}"
  
- name: "[local] Signing certificate reqs"
  delegate_to: localhost
  expect:
    command: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa sign-req server {{ inventory_hostname }}"
    responses:
      '  Confirm request details: ': 'yes'
  
- name: "[servers] Copying signed server certificates to remote hosts"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "{{ easy_rsa_local_path }}/easy-rsa/pki/issued/{{ inventory_hostname }}.crt"
    dest: /etc/openvpn/server.crt
    mode: '0664'
  
- name: "[servers] Generating Diffie-Hellman params"
  become: yes
  become_user: "{{ open_vpn_user }}"
  command: "/home/{{ open_vpn_user }}/easy-rsa/easyrsa gen-dh"
  
- name: "[servers] Copying Diffie-Hellman params to /etc/openvpn/"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/home/{{ open_vpn_user }}/easy-rsa/pki/dh.pem"
    dest: /etc/openvpn/
    remote_src: yes
  
- name: "[servers] Generating HMAC signature for TLS integrity verification"
  become: yes
  become_user: "{{ open_vpn_user }}"
  command: openvpn --genkey secret /etc/openvpn/ta.key
  when: open_vpn_version == "release/2.5"

- name: "[servers] Generating HMAC signature for TLS integrity verification"
  become: yes
  become_user: "{{ open_vpn_user }}"
  command: openvpn --genkey --secret /etc/openvpn/ta.key
  when: open_vpn_version == "release/2.4"

- name: "[servers] Create client-configs directory"
  become: yes
  become_user: "{{ open_vpn_user }}"
  file:
    path: "/home/{{ open_vpn_user }}/client-configs/keys"
    state: directory
    owner: "{{ open_vpn_user }}"
    group: "{{ open_vpn_user }}"
    mode: 0700
    recurse: yes
    
- name: "[servers] Generating client keys"
  become: yes
  become_user: "{{ open_vpn_user }}"
  expect:
    command: "/home/{{ open_vpn_user }}/easy-rsa/easyrsa gen-req client1 nopass"
    responses:
      'Common Name \(eg: your user, host, or server name\) *': ''
      
- name: "[servers] Copy client keys to /home/{{ open_vpn_user }}/client-configs/keys dir"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/home/{{ open_vpn_user }}/easy-rsa/pki/private/client1.key"
    dest: "/home/{{ open_vpn_user }}/client-configs/keys"
    remote_src: yes

- name: "[servers] Prepare client reqs"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/home/{{ open_vpn_user }}/easy-rsa/pki/reqs/client1.req"
    dest: "/home/{{ open_vpn_user }}/"
    remote_src: yes
    
- name: "[local] Fetching certificate reqs from remote nodes"
  fetch:
    src: "/home/{{ open_vpn_user }}/client1.req"
    dest: "fetched/client/{{ inventory_hostname }}.req"
    flat: yes
    
- name: "[local] Importing client certificate reqs"
  delegate_to: localhost
  command:
    cmd: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa import-req fetched/client/{{ inventory_hostname }}.req c-{{ inventory_hostname }}"
  
- name: "[local] Signing certificate reqs"
  delegate_to: localhost
  expect:
    command: "{{ easy_rsa_local_path }}/easy-rsa/easyrsa sign-req client c-{{ inventory_hostname }}"
    responses:
      '  Confirm request details: ': 'yes'
  
- name: "[servers] Copying signed client certificates to remote hosts"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "{{ easy_rsa_local_path }}/easy-rsa/pki/issued/c-{{ inventory_hostname }}.crt"
    dest: "/home/{{ open_vpn_user }}/client-configs/keys/client1.crt"
    mode: '0664'
  
- name: "[servers] Copying ca.crt to client config"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/etc/openvpn/ca.crt"
    dest: "/home/{{ open_vpn_user }}/client-configs/keys/"
    mode: '0664'
    remote_src: yes
    
- name: "[servers] Copying ta.key to client config"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "/etc/openvpn/ta.key"
    dest: "/home/{{ open_vpn_user }}/client-configs/keys/"
    mode: '0664'
    remote_src: yes
    
- name: "[servers] Copying {{ make_openvpn_config }} openvpn config making script to remote hosts"
  become: yes
  become_user: "{{ open_vpn_user }}"
  copy:
    src: "{{ make_openvpn_config }}"
    dest: "/home/{{ open_vpn_user }}/"
    mode: '0774'
    
- name: "[servers] Copying {{ user_key_check_script }} username checking script to remote hosts"
  become: yes
  become_user: "{{ open_vpn_user }}"
  template:
    src: "{{ user_key_check_script }}.j2"
    dest: "/etc/openvpn/{{ user_key_check_script }}"
    mode: '0775'
    
- name: "[servers] Creating openvpn server config file"
  become: yes
  become_user: "{{ open_vpn_user }}"
  shell: "/home/{{ open_vpn_user }}/{{ make_openvpn_config }} -t server -i {{ item.0 }} -m 255.255.255.0 -l {{ item.1 }} -p {{ item.2 }} -u {{user_key_check_script}} -o /etc/openvpn/server-{{ item.1 }}.conf"
  with_together:
    - "{{ openvpn_server_ip_pool }}"
    - "{{ openvpn_ports }}"
    - "{{ openvpn_protocols }}"
    
- name: "[servers] Starting openvpn services"
  become: yes
  shell: "systemctl start openvpn@server-{{ item }} && systemctl enable openvpn@server-{{ item }}"
  loop: "{{ openvpn_ports }}"

- name: "[servers] Creating openvpn client config file"
  become: yes
  become_user: "{{ open_vpn_user }}"
  shell: "/home/{{ open_vpn_user }}/{{ make_openvpn_config }} -t client -c /home/{{ open_vpn_user }}/client-configs/keys/client1.crt -k /home/{{ open_vpn_user }}/client-configs/keys/client1.key -a /home/{{ open_vpn_user }}/client-configs/keys/ca.crt -s /home/{{ open_vpn_user }}/client-configs/keys/ta.key -i $(curl -s  ifconfig.me)  -l {{ item.0 }} -p {{ item.1 }} -u /etc/openvpn/{{user_key_check_script}} -o /home/{{ open_vpn_user }}/client1-{{ item.0 }}.ovpn"
  with_together:
    - "{{ openvpn_ports }}"
    - "{{ openvpn_protocols }}"

- name: "[local] Fetching client connection configs"
  fetch:
    src: "/home/{{ open_vpn_user }}/client1-{{ item }}.ovpn"
    dest: "fetched/client-connections/{{ inventory_hostname }}-client{{ item }}.ovpn"
    flat: yes
  loop: "{{ openvpn_ports }}"

- name: "[servers] Enabling system packet forwarding"
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^#net\.ipv4\.ip_forward=1'
    line: "net.ipv4.ip_forward=1"

- name: "[servers] Reloadling sysctl to process new rules"
  become: yes
  command: "sysctl -p"
    
- name: "[servers] Enabling ufw packet forwarding"
  become: yes
  lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY="DROP"'
    line: "DEFAULT_FORWARD_POLICY=\"ACCEPT\""
    
- name: "[servers] Adding new ufw postrouting rules"
  become: yes
  shell: "echo \"\n*nat\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -s {{ openvpn_server_ip_pool[0] }}/16 -o $(ip route | grep default | awk '{print $5}') -j MASQUERADE\nCOMMIT\n\" >> /etc/ufw/before.rules"

- name: "[servers] Adding new ufw rule to allow ssh connections"
  become: yes
  ufw:
    rule: allow
    name: OpenSSH
    
- name: "[servers] Adding new ufw rules to allow openvpn ports connections"
  become: yes
  ufw:
    rule: allow
    port: "{{ item.0 }}"
    proto: "{{ item.1 }}"
  with_together:
    - "{{ openvpn_ports }}"
    - "{{ openvpn_protocols }}"
    
- name: "[servers] Reload ufw"
  become: yes
  ufw:
    state: reloaded
    
- name: "[servers] Enable ufw"
  become: yes
  ufw:
    state: enabled

- name: "[servers] Uploading {{ traffic_control_script }} script for bandwidth limit"
  become: yes
  copy:
    src: "{{ traffic_control_script }}"
    dest: "/opt/"
    mode: '0700'
  when: not vpn_servers_premium

- name: "[servers] Uploading {{ mark_packets_script }} script for bandwidth limit"
  become: yes
  copy:
    src: "{{ mark_packets_script }}"
    dest: "/opt/"
    mode: '0700'
  when: not vpn_servers_premium

- name: "[servers] Setting max upload speed (Free servers upload bandwidth) {{free_servers_upload_max_speed}}"
  become: yes
  shell: "ip route | grep default | awk '{print $5}' > /opt/default.txt; /opt/{{ traffic_control_script }} /opt/default.txt {{free_servers_upload_max_speed}}"
  when: not vpn_servers_premium

- name: "[servers] Setting max download speed (Free servers upload bandwidth) {{free_servers_download_max_speed}}"
  become: yes
  shell: "ifconfig | grep tun | awk '{print $1}' | sed 's/://g' > /opt/interfaces.txt; /opt/{{ traffic_control_script }} /opt/interfaces.txt {{free_servers_download_max_speed}}"
  when: not vpn_servers_premium

- name: "[servers] Marking packets for traffic control"
  become: yes
  shell: "/opt/{{ mark_packets_script }} /opt/interfaces.txt"
  when: not vpn_servers_premium 

- name: "[local] Add servers to backend api"
  local_action: "command python3 ./{{ add_servers_to_backend_api }} -f fetched/client-connections/{{ inventory_hostname }}-client{{ item }}.ovpn -u {{ backend_server_url_base }} -a {{ backend_server_api_token }} -p {{ vpn_servers_premium }}"
  with_items:
    - "{{ openvpn_ports }}"

- name: "[all] Done"
  debug:
    msg:
    - "All done!"
    - "Check fetched/client-connections/ directory to get openvpn client connection files"
